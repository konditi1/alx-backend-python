# Generated by Django 4.2.18 on 2025-01-26 07:45

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Booking",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("booking_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("booking_status", models.CharField(choices=[("pending", "Pending"), ("confirmed", "Confirmed"), ("cancelled", "Cancelled")], default="pending", max_length=10)),
                ("payment_status", models.CharField(choices=[("in_progress", "In Progress"), ("paid", "Paid"), ("failed", "Failed")], default="in_progress", max_length=12)),
            ],
            options={
                "db_table": "Booking",
            },
        ),
        migrations.CreateModel(
            name="BookingCancellation",
            fields=[
                ("cancellation_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("cancelled_by", models.CharField(choices=[("guest", "Guest"), ("host", "Host")], max_length=10)),
                ("cancel_fee", models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ("cancel_reason", models.TextField(blank=True, null=True)),
                ("cancel_at", models.DateTimeField(auto_now_add=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "BookingCancellation",
            },
        ),
        migrations.CreateModel(
            name="Conversation",
            fields=[
                ("conversation_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "conversations",
            },
        ),
        migrations.CreateModel(
            name="Coupon",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("coupon_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("discount_type", models.CharField(choices=[("percentage", "Percentage"), ("fixed_amount", "Fixed Amount")], max_length=15)),
                ("discount_amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("code", models.CharField(max_length=36, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("max_no_uses", models.PositiveIntegerField()),
                ("valid_from", models.DateTimeField()),
                ("valid_to", models.DateTimeField()),
            ],
            options={
                "db_table": "Coupon",
            },
        ),
        migrations.CreateModel(
            name="CouponUsage",
            fields=[
                ("coupon_usage_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("used_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "CouponUsage",
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("location_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("latitude", models.DecimalField(decimal_places=7, max_digits=10, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ("longitude", models.DecimalField(decimal_places=7, max_digits=10, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ("city", models.CharField(max_length=36)),
                ("state", models.CharField(blank=True, max_length=36, null=True)),
                ("country", models.CharField(max_length=36)),
            ],
            options={
                "db_table": "Location",
            },
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                ("message_id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("message_body", models.TextField()),
                ("sent_at", models.DateTimeField(auto_now_add=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-sent_at"],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                ("notification_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("event_type", models.CharField(choices=[("booking_confirmation", "Booking Confirmation"), ("payment_update", "Payment Update"), ("general_alert", "General Alert")], max_length=20)),
                ("is_read", models.BooleanField(default=False)),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expiration_time", models.DateTimeField(blank=True, null=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "Notification",
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("payment_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal("0.00"))])),
                ("status", models.CharField(choices=[("pending", "Pending"), ("completed", "Completed"), ("failed", "Failed")], default="pending", max_length=10)),
                ("transaction_id", models.CharField(max_length=36, unique=True)),
                ("payment_date", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "Payment",
            },
        ),
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("pay_method_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("transaction_fee", models.DecimalField(decimal_places=2, default=0.0, max_digits=5, null=True)),
                ("currency_conversion", models.DecimalField(decimal_places=2, default=1.0, max_digits=5)),
                ("name", models.CharField(max_length=36)),
            ],
            options={
                "db_table": "PaymentMethod",
            },
        ),
        migrations.CreateModel(
            name="Property",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("property_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("price_per_night", models.DecimalField(decimal_places=2, max_digits=10)),
                ("availability_status", models.CharField(choices=[("available", "Available"), ("unavailable", "Unavailable")], default="available", max_length=12)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "Property",
            },
        ),
        migrations.CreateModel(
            name="PropertyImages",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("image_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("image_url", models.TextField()),
                ("alt_text", models.TextField(blank=True, null=True)),
                ("image_type", models.CharField(choices=[("main", "Main"), ("gallery", "Gallery"), ("thumbnail", "Thumbnail")], max_length=15)),
            ],
            options={
                "db_table": "PropertyImages",
            },
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("review_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("rating", models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ("comment", models.TextField(blank=True, null=True)),
                ("reviewed_by", models.CharField(choices=[("guest", "Guest"), ("host", "Host")], default="guest", max_length=10)),
            ],
            options={
                "db_table": "Review",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("user_id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("role", models.CharField(choices=[("admin", "Admin"), ("host", "Host"), ("guest", "Guest")], default="guest", max_length=10)),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("password_hash", models.CharField(max_length=255)),
                ("phone_number", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="UserToken",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("token_id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("token", models.CharField(max_length=255, unique=True)),
                ("token_expire_at", models.DateTimeField()),
                ("is_used", models.BooleanField(default=False)),
                ("user_id", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="tokens", to="chats.user")),
            ],
            options={
                "db_table": "UserToken",
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="idx_user_email"),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(fields=("email",), name="unique_email"),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(check=models.Q(("role__in", ["admin", "host", "guest"])), name="role_in_choices"),
        ),
        migrations.AddField(
            model_name="review",
            name="property_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="reviews", to="chats.property"),
        ),
        migrations.AddField(
            model_name="review",
            name="user_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="reviews", to="chats.user"),
        ),
        migrations.AddField(
            model_name="propertyimages",
            name="property_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="images", to="chats.property"),
        ),
        migrations.AddField(
            model_name="property",
            name="host_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chats.user"),
        ),
        migrations.AddField(
            model_name="property",
            name="location_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="chats.location"),
        ),
        migrations.AddIndex(
            model_name="paymentmethod",
            index=models.Index(fields=["name"], name="idx_paymentmethod_name"),
        ),
        migrations.AddField(
            model_name="payment",
            name="booking_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="payments", to="chats.booking"),
        ),
        migrations.AddField(
            model_name="payment",
            name="pay_method_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="payments", to="chats.paymentmethod"),
        ),
        migrations.AddField(
            model_name="notification",
            name="user_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="notifications", to="chats.user"),
        ),
        migrations.AddField(
            model_name="message",
            name="conversation",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="messages", to="chats.conversation"),
        ),
        migrations.AddField(
            model_name="message",
            name="recipient_id",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="received_messages", to="chats.user"),
        ),
        migrations.AddField(
            model_name="message",
            name="sender_id",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="chats.user"),
        ),
        migrations.AddIndex(
            model_name="location",
            index=models.Index(fields=["city", "country"], name="idx_location_city_country"),
        ),
        migrations.AddField(
            model_name="couponusage",
            name="booking_id",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="coupon_usages", to="chats.booking"),
        ),
        migrations.AddField(
            model_name="couponusage",
            name="coupon_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="usages", to="chats.coupon"),
        ),
        migrations.AddField(
            model_name="couponusage",
            name="property_id",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="coupon_usages", to="chats.property"),
        ),
        migrations.AddField(
            model_name="couponusage",
            name="user_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="coupon_usages", to="chats.user"),
        ),
        migrations.AddField(
            model_name="coupon",
            name="property_id",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="coupons", to="chats.property"),
        ),
        migrations.AddField(
            model_name="coupon",
            name="user_id",
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="coupons", to="chats.user"),
        ),
        migrations.AddField(
            model_name="conversation",
            name="participants",
            field=models.ManyToManyField(related_name="conversations", to="chats.user"),
        ),
        migrations.AddField(
            model_name="bookingcancellation",
            name="booking_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="cancellations", to="chats.booking"),
        ),
        migrations.AddField(
            model_name="booking",
            name="property_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="bookings", to="chats.property"),
        ),
        migrations.AddField(
            model_name="booking",
            name="user_id",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="bookings", to="chats.user"),
        ),
        migrations.AddIndex(
            model_name="usertoken",
            index=models.Index(fields=["token", "token_expire_at", "is_used"], name="idx_token_validation"),
        ),
        migrations.AddIndex(
            model_name="usertoken",
            index=models.Index(fields=["user_id"], name="idx_user_tokens"),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(fields=["property_id"], name="idx_property_reviews"),
        ),
        migrations.AddIndex(
            model_name="propertyimages",
            index=models.Index(fields=["property_id"], name="idx_propertyImages_id"),
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(fields=["price_per_night"], name="idx_property_price"),
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(fields=["location_id"], name="idx_property_location"),
        ),
        migrations.AddIndex(
            model_name="property",
            index=models.Index(fields=["property_id"], name="idx_property_id"),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(fields=["booking_id"], name="idx_booking_payments"),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(fields=["status"], name="idx_payment_status"),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(fields=["user_id"], name="idx_user_notifications"),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(fields=["sender_id"], name="idx_sender_id"),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(fields=["recipient_id"], name="idx_recipient_id"),
        ),
        migrations.AddIndex(
            model_name="couponusage",
            index=models.Index(fields=["user_id", "coupon_id"], name="idx_user_coupon_usage"),
        ),
        migrations.AlterUniqueTogether(
            name="couponusage",
            unique_together={("coupon_id", "user_id")},
        ),
        migrations.AddIndex(
            model_name="coupon",
            index=models.Index(fields=["user_id"], name="idx_user_coupons"),
        ),
        migrations.AddIndex(
            model_name="coupon",
            index=models.Index(fields=["property_id"], name="idx_property_coupons"),
        ),
        migrations.AddIndex(
            model_name="bookingcancellation",
            index=models.Index(fields=["booking_id"], name="idx_booking_cancellations"),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(fields=["property_id"], name="idx_property_bookings"),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(fields=["user_id"], name="idx_user_bookings"),
        ),
    ]
